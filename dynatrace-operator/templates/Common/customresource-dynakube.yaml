# Copyright 2020 Dynatrace LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- $platformIsSet := printf "%s" (required "Platform needs to be set to kubernetes or openshift" (include "dynatrace-operator.platformSet" .))}}
{{- if and (.Values.apiUrl) (.Values.apiToken) (.Values.paasToken) }}
apiVersion: dynatrace.com/v1alpha1
kind: DynaKube
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
spec:
  apiUrl: {{ required "ApiUrl needs to be set!" .Values.apiUrl }}

  tokens: {{ .Values.name }}

  {{- if .Values.skipCertCheck }}
  skipCertCheck: {{ .Values.skipCertCheck }}
  {{- end }}

  {{- if .Values.proxy }}
  proxy:
    valueFrom: {{ .Values.name }}
  {{- end }}

  {{- if .Values.trustedCAs }}
  trustedCAs: {{ .Values.trustedCAs }}
  {{- end }}

  {{- if .Values.networkZone }}
  networkZone: {{ .Values.networkZone }}
  {{- end }}

  activeGate:
    {{- if .Values.activeGate.image}}
    image: {{ .Values.activeGate.image }}
    {{- end}}
    autoUpdate: {{ .Values.activeGate.autoUpdate }}

  oneAgent:
    {{- if .Values.oneAgent.image }}
    image: {{ .Values.oneAgent.image }}
    {{- end }}
    autoUpdate: {{ .Values.oneAgent.autoUpdate }}
    {{- if .Values.oneAgent.version }}
    version: {{ .Values.oneAgent.version }}
    {{- end }}

  {{- if .Values.classicFullStack.enabled }}
  classicFullStack:
    enabled: true

    {{- if .Values.classicFullStack.nodeSelector }}
    nodeSelector: {{ .Values.classicFullStack.nodeSelector | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.classicFullStack.tolerations }}
    tolerations: {{ .Values.classicFullStack.tolerations | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.classicFullStack.waitReadySeconds }}
    waitReadySeconds: {{ .Values.classicFullStack.waitReadySeconds }}
    {{- end }}

    {{- if .Values.classicFullStack.resources }}
    resources: {{ .Values.classicFullStack.resources | toYaml | nindent 8}}
    {{- end }}

    {{- if and (.Values.classicFullStack.args) (ge (len .Values.classicFullStack.args) (1))}}
    args: {{ .Values.classicFullStack.args | toYaml | nindent 8 }}
    {{- end }}

    {{- if and (.Values.classicFullStack.env) (ge (len .Values.classicFullStack.env) (1))}}
    env: {{ .Values.classicFullStack.env | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.classicFullStack.priorityClassName }}
    priorityClassName: {{ .Values.classicFullStack.priorityClassName }}
    {{- end }}

    {{- if .Values.classicFullStack.dnsPolicy }}
    dnsPolicy: {{ .Values.classicFullStack.dnsPolicy }}
    {{- end }}

    {{- if .Values.classicFullStack.serviceAccountName }}
    serviceAccountName: {{ .Values.classicFullStack.serviceAccountName }}
    {{- end }}

    {{- if .Values.classicFullStack.labels }}
    labels: {{ .Values.classicFullStack.labels | toYaml | nindent 8 }}
    {{- end }}

    useUnprivilegedMode: {{ .Values.classicFullStack.useUnprivilegedMode }}

    useImmutableImage: {{ .Values.classicFullStack.useImmutableImage }}
  {{- end }}

  {{- if .Values.kubernetesMonitoring.enabled }}
  kubernetesMonitoring:
    enabled: {{ .Values.kubernetesMonitoring.enabled }}

    {{- if .Values.kubernetesMonitoring.replicas }}
    replicas: {{ .Values.kubernetesMonitoring.replicas }}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.serviceAccountName}}
    serviceAccountName: {{ .Values.kubernetesMonitoring.serviceAccountName }}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.tolerations }}
    tolerations: {{ .Values.kubernetesMonitoring.tolerations | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.nodeSelector }}
    nodeSelector: {{ .Values.kubernetesMonitoring.nodeSelector | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.resources }}
    resources: {{ .Values.kubernetesMonitoring.resources | toYaml | nindent 8}}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.labels }}
    labels: {{ .Values.kubernetesMonitoring.labels | toYaml | nindent 8 }}
    {{- end }}

    {{- if and (.Values.kubernetesMonitoring.args) (ge (len .Values.kubernetesMonitoring.args) (1))}}
    args: {{ .Values.kubernetesMonitoring.args | toYaml | nindent 8 }}
    {{- end }}

    {{- if and (.Values.kubernetesMonitoring.env) (ge (len .Values.kubernetesMonitoring.env) (1))}}
    env: {{ .Values.kubernetesMonitoring.env | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.group }}
    group: {{ .Values.kubernetesMonitoring.group }}
    {{- end }}

    {{- if .Values.kubernetesMonitoring.customProperties }}
      {{- if .Values.kubernetesMonitoring.customProperties.value }}
    customProperties:
      value: {{ .Values.kubernetesMonitoring.customProperties.value }}
      {{- else if .Values.kubernetesMonitoring.customProperties.valueFrom }}
    customProperties:
      valueFrom: {{ .Values.kubernetesMonitoring.customProperties.valueFrom }}
      {{- end }}
    {{- end }}
  {{- end }}

  {{- if .Values.routing.enabled }}
  routing:
    enabled: {{ .Values.routing.enabled }}

    {{- if .Values.routing.replicas }}
    replicas: {{ .Values.routing.replicas }}
    {{- end }}

    {{- if .Values.routing.group }}
    group: {{ .Values.routing.group }}
    {{- end }}

    {{- if .Values.routing.customProperties.value }}
    customProperties:
      value: {{ .Values.routing.customProperties.value }}
    {{- else if .Values.routing.customProperties.valueFrom }}
    customProperties:
      valueFrom: {{ .Values.routing.customProperties.valueFrom }}
    {{- end }}

    {{- if .Values.routing.resources }}
    resources: {{ .Values.routing.resources | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.routing.nodeSelector }}
    nodeSelector: {{ .Values.routing.nodeSelector | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.routing.tolerations }}
    tolerations: {{ .Values.routing.tolerations | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.routing.labels }}
    labels: {{ .Values.routing.labels | toYaml | nindent 8 }}
    {{- end }}

    {{- if and (.Values.routing.args) (ge (len .Values.routing.args) (1))}}
    args: {{ .Values.routing.args | toYaml | nindent 8 }}
    {{- end }}

    {{- if and (.Values.routing.env) (ge (len .Values.routing.env) (1))}}
    env: {{ .Values.routing.env | toYaml | nindent 8 }}
    {{- end }}

    {{- if .Values.routing.serviceAccountName}}
    serviceAccountName: {{ .Values.routing.serviceAccountName }}
    {{- end }}
  {{- end}}

{{- end }}
